name: SecureAI Platform CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: secureai-app
  AZURE_RESOURCE_GROUP: secureai-rg
  CONTAINER_REGISTRY: secureairegistry.azurecr.io
  IMAGE_NAME: secureai-platform

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install security tools
        run: |
          pip install bandit safety pytest-cov

      - name: Run Bandit
        run: bandit -r src/ -ll -ii -f json -o bandit-results.json

      - name: Check dependencies
        run: safety check

      - name: Run SAST
        uses: github/codeql-action/analyze@v2
        with:
          languages: python

      - name: Upload security results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: bandit-results.json

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}-staging
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Run security tests
        run: |
          chmod +x ./scripts/security-tests.sh
          ./scripts/security-tests.sh staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://api.secureai.example.com
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to production
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Configure monitoring
        run: |
          az monitor app-insights component update \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --app ${{ env.AZURE_WEBAPP_NAME }} \
            --sampling-percentage 100

      - name: Run post-deployment checks
        run: |
          chmod +x ./scripts/post-deploy.sh
          ./scripts/post-deploy.sh production
