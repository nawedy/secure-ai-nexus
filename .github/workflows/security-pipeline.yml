name: Security Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pytest-security

    - name: Install Node.js dependencies
      run: |
        npm ci
        npm install -g snyk

    - name: Run ESLint security checks
      run: npm run lint

    - name: Run TypeScript type checks
      run: npm run type-check

    - name: Run Python security checks
      run: |
        bandit -r ./src
        safety check
        pytest --security

    - name: Run Snyk security scan
      run: snyk test
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run SAST analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: ['python', 'javascript', 'typescript']

    - name: Run dependency audit
      run: |
        npm audit
        pip-audit

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs,vuln'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Run secrets scanning
      uses: gitleaks/gitleaks-action@v2
      env:
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  build-and-test:
    needs: security-checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Build application
      run: |
        npm run build
        python -m build

    - name: Run tests
      run: |
        npm test
        pytest

    - name: Run integration tests
      run: |
        npm run test:integration
        pytest tests/integration

    - name: Build Docker image
      run: docker build -t secureai-platform .

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'secureai-platform:latest'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'secureai-platform'
        slot-name: 'production'
        package: .

    - name: Run post-deployment security scan
      uses: azure/security-scan@v1
      with:
        resource-group: 'secureai-platform'
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Security monitoring setup
      run: |
        az monitor alert create \
          --name "SecurityAlert" \
          --resource-group "secureai-platform" \
          --condition "SecurityEvent >= 1" \
          --description "Security event detected"
